snippet header
#!/usr/bin/env python3
# vim: set ts=4 sts=0 sw=4 si fenc=utf-8 et:
# vim: set fdm=marker fmr={{{,}}} fdl=0 foldcolumn=4:
# Authors:     BP
# Maintainers: BP
# Copyright:   2023, HRDAG, GPL v2 or later
# =========================================

# ---- dependencies {{{
snippet deps
    from pathlib import Path
    from sys import stdout
    import argparse
    import logging
    import pandas as pd
#}}}

# --- methods --- {{{
snippet args
    def get_args():
        parser = argparse.ArgumentParser()
        parser.add_argument("--input", default=None)
        parser.add_argument("--output", default=None)
        args = parser.parse_args()
        assert Path(args.input).exists()
        return args

snippet logs
    def get_logger(sname, file_name=None):
        logger = logging.getLogger(sname)
        logger.setLevel(logging.DEBUG)
        formatter = logging.Formatter("%(asctime)s - %(levelname)s " +
                                      "- %(message)s", datefmt='%Y-%m-%d %H:%M:%S')
        stream_handler = logging.StreamHandler(stdout)
        stream_handler.setFormatter(formatter)
        logger.addHandler(stream_handler)
        if file_name:
            file_handler = logging.FileHandler(file_name)
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
        return logger

snippet read_yaml
    def read_yaml(yaml_file):
        with open(yaml_file, 'r') as f:
            data = yaml.safe_load(f)
            f.close()
        return data

snippet write_yaml
    def write_yaml(yaml_file, data):
        with open(yaml_file, 'w') as f:
            yaml.dump(data, f, default_flow_style=False)
            f.close()
        print(f'{yaml_file} written successfully')
        return 1

snippet git_root
    def git_root():
        top = subprocess.Popen(['git', 'rev-parse', '--show-toplevel'],
                               stdout = subprocess.PIPE,
                               stderr = subprocess.PIPE)
        return top.communicate()[0].decode('utf-8').strip()
# }}}

# --- main --- {{{
snippet main
    if __name__ == '__main__':
    	$1

snippet setup_base
        # setup logging
        logger = get_logger(__name__, "output/script.log")
    
        # arg handling
        args = get_args()
# }}}

# done.
